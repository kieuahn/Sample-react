{"ast":null,"code":"var _jsxFileName = \"/Users/bbigemoloserr/Documents/Sample react/new-test/src/DisplayList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DisplayList() {\n  _s();\n\n  const [parkList, setParkList] = useState([]);\n  const [parkAvailable, setParkAvailable] = useState([]);\n  let fetching = [];\n  let parkIdAvailable = [],\n      parkVarAvailable = [];\n  const [currentTime, setCurrentTime] = useState(0);\n  const endpoint = 'https://api.data.gov.hk/v1/carpark-info-vacancy';\n\n  const loading = () => {\n    let TempporaryList = [];\n    fetch(endpoint + '?data=vacancy').then(response => response.json()).then(AfterFetch => {\n      fetching = AfterFetch.results;\n      fetching.map(parking => {\n        let TypeVar = []; ///let is block scoped. What that means is that a variable created with the let keyword is available inside the “block” that it was created in as well as any nested blocks. When I say “block”, I mean anything surrounded by a curly brace {} like in a for loop or an if statement. \n        ///bỏ let ở ngoài fetch \n\n        if (parking.privateCar !== undefined && parking.privateCar[0].vacancy > 0) {\n          TypeVar.push('Private Car, ');\n        }\n\n        if (parking.LGV !== undefined && parking.LGV[0].vacancy > 0) {\n          TypeVar.push('Light Good Vehicles, ');\n        }\n\n        if (parking.HGV !== undefined && parking.HGV[0].vacancy > 0) {\n          TypeVar.push('Heavy Good Vehicles, ');\n        }\n\n        if (parking.CV !== undefined && parking.CV[0].vacancy > 0) {\n          TypeVar.push(\"Container Vehicle, \");\n        }\n\n        if (parking.coach !== undefined && parking.coach[0].vacancy > 0) {\n          TypeVar.push('Coach, ');\n        }\n\n        if (parking.motorCycle !== undefined && parking.motorCycle[0].vacancy > 0) {\n          TypeVar.push('Motor Cycle, ');\n        }\n\n        if (TypeVar.length > 0) {\n          parkIdAvailable.push(parking.park_Id);\n          parkVarAvailable.push(TypeVar);\n        }\n\n        console.log(parkVarAvailable);\n      });\n    }, fetch(endpoint).then(response => response.json()).then(AfterFetch => {\n      AfterFetch.results.filter(parking => {\n        parkIdAvailable.includes(parking.park_Id) && TempporaryList.push(parking);\n      });\n      setParkAvailable(parkVarAvailable);\n      setParkList(TempporaryList);\n    }));\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => setCurrentTime(currentTime => currentTime + 1), 30000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    loading();\n  }, [currentTime]);\n  const style = {\n    border: '1px solid black'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: [\" \", `table, th, td {border: 1px solid black; border-collapse: collapse;}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      style: style,\n      cellPadding: 0,\n      cellSpacing: 0,\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Id\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Place\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Monthly Charges\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Hourly Charges\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Day-Night Charges\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Available for \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Fragment, {\n      children: attendence.map(person => {\n        return /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 25\n              }, this), person.Attendence.map(personAttendendance => {\n                return /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: personAttendendance.date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 34\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: person.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 25\n              }, this), person.Attendence.map(personAttendendance => {\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: personAttendendance.attendence\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 34\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 19\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DisplayList, \"5GY3mJoFixwC0aLEwMW61yb51T0=\");\n\n_c = DisplayList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayList\");","map":{"version":3,"sources":["/Users/bbigemoloserr/Documents/Sample react/new-test/src/DisplayList.jsx"],"names":["React","useState","useEffect","DisplayList","parkList","setParkList","parkAvailable","setParkAvailable","fetching","parkIdAvailable","parkVarAvailable","currentTime","setCurrentTime","endpoint","loading","TempporaryList","fetch","then","response","json","AfterFetch","results","map","parking","TypeVar","privateCar","undefined","vacancy","push","LGV","HGV","CV","coach","motorCycle","length","park_Id","console","log","filter","includes","interval","setInterval","clearInterval","style","border","attendence","person","Attendence","personAttendendance","date","Name"],"mappings":"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","sourcesContent":["import React, { useState , useEffect } from 'react'\n\nexport default function DisplayList() {\n    const [parkList, setParkList] = useState([]) \n    const [parkAvailable, setParkAvailable] = useState([]) \n    let fetching =[]\n    let parkIdAvailable =[], parkVarAvailable =[]\n    const [currentTime, setCurrentTime] = useState(0)\n    const endpoint='https://api.data.gov.hk/v1/carpark-info-vacancy'\n    const loading =() => {\n        let TempporaryList =[]\n        fetch(endpoint + '?data=vacancy')\n        .then(response => response.json())\n        .then(AfterFetch => {\n            fetching = AfterFetch.results;\n            fetching.map((parking => {\n                let TypeVar =[]\n///let is block scoped. What that means is that a variable created with the let keyword is available inside the “block” that it was created in as well as any nested blocks. When I say “block”, I mean anything surrounded by a curly brace {} like in a for loop or an if statement. \n///bỏ let ở ngoài fetch \n                if (parking.privateCar !== undefined && parking.privateCar[0].vacancy >0 ) {\n                    TypeVar.push('Private Car, ')\n                }\n                if (parking.LGV !== undefined && parking.LGV[0].vacancy >0 ) {\n                    TypeVar.push('Light Good Vehicles, ')\n                }\n                if (parking.HGV !== undefined && parking.HGV[0].vacancy >0 ) {\n                    TypeVar.push('Heavy Good Vehicles, ')\n                }\n                if (parking.CV !== undefined && parking.CV[0].vacancy > 0) {\n                    TypeVar.push(\"Container Vehicle, \")\n                }\n                if (parking.coach !== undefined && parking.coach[0].vacancy >0 ) {\n                    TypeVar.push('Coach, ') \n                }\n                if (parking.motorCycle !== undefined && parking.motorCycle[0].vacancy >0 ) {\n                    TypeVar.push('Motor Cycle, ') \n                }\n                if (TypeVar.length>0) {\n                    parkIdAvailable.push(parking.park_Id); parkVarAvailable.push(TypeVar)\n                }\n                console.log(parkVarAvailable)\n            }))},\n                \n                fetch(endpoint)\n                .then(response =>response.json())\n                .then(AfterFetch => {\n                AfterFetch.results.filter((parking)=> {\n                        parkIdAvailable.includes(parking.park_Id) && TempporaryList.push(parking)\n                })\n                setParkAvailable(parkVarAvailable) \n                setParkList(TempporaryList) \n            }   )\n                  \n    )}\n\n    useEffect(() => {\n        const interval = setInterval(() => setCurrentTime(currentTime => currentTime + 1), 30000)\n        return () => clearInterval(interval)} , [])\n    useEffect(() => {\n        loading()\n    }, [currentTime])\n    \n    const style = \n    {\n    border: '1px solid black',\n\n    };\n\n    \n    return(\n        <div>\n           <style> {`table, th, td {border: 1px solid black; border-collapse: collapse;}`}</style>\n        <table style ={style} cellPadding={0} cellSpacing={0}>\n            <tr>\n                <th>Id</th>\n                <th>User</th>\n                <th>Place</th>\n                <th>Monthly Charges</th>\n                <th>Hourly Charges</th>\n                <th>Day-Night Charges</th>\n                <th>Available for </th>\n            </tr>\n       </table>\n\n        \n            <Fragment>\n              {attendence.map(person => {\n                return (\n                  <Table>\n                    <thead>\n                      <tr>\n                        <th>Name</th>\n                        {person.Attendence.map(personAttendendance => {\n                          return <th>{personAttendendance.date}</th>;\n                        })}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td>{person.Name}</td>\n                        {person.Attendence.map(personAttendendance => {\n                          return <td>{personAttendendance.attendence}</td>;\n                        })}\n                      </tr>\n                    </tbody>\n                  </Table>\n                );\n              })}\n            </Fragment>\n            </div>\n          );\n        \n       \n        \n\n        }"]},"metadata":{},"sourceType":"module"}